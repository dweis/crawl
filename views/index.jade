script(src='/javascripts/melonJS-0.9.2.js')
style
  #log {
    display: none;
  }

  .cell {
    position: absolute;
    width: 10px;
    height: 10px;
    background-color: #999;
    line-height: 10px;
    padding: 0px;
    margin: 0px;
    font-size: 12px;
    text-align: center;
    vertical-align: middle;
  }

  #map {
    position: relative;
    border: 1px solid #000;
    width: 768px;
    height: 512px;
    background-color: #333;
    overflow: hidden;
    display: none;
  }

  #jsapp {
  }

div#map
ul#log
#jsapp

script
  (function($){
    var g_resources = [{ name: 'spr_sheet_01'
                       , src: '/assets/sprites/sheets/spr_sheet_01.png'
                       , type: 'image' }]

    var viewportWidth = 48
      , viewportHeight = 32
      , tileWidth = 16
      , tileHeight = 16

    var jsApp = {
      onload: function() {
        if (!me.video.init('jsapp', viewportWidth * tileWidth, viewportHeight * tileHeight, false, 1.0)) {
          alert('sorry, your browser doesnt support html 5 canvas.')
          return
        }

        me.audio.init('mp3,ogg')
        me.loader.onload = this.loaded.bind(this)
        me.loader.preload(g_resources)
        me.state.change(me.state.LOADING)
      }
    , loaded: function() {
        me.state.set(me.state.PLAY, new PlayScreen())

        me.entityPool.add('player', PlayerEntity)

        me.state.change(me.state.PLAY)
      }
    }

    var PlayerEntity = me.ObjectEntity.extend({
      init: function(x, y, settings) {
        this.parent(x, y, settings)

        me.game.viewport.follow(this.pos, me.game.viewport.AXIS.BOTH)
      }
    , update: function() {

      }
    })

    var PlayScreen = me.ScreenObject.extend({
      onResetEvent: function() {

      }
    , onDestroyEvent: function() {
      }
    })

    var Cell = Backbone.Model.extend({
      id: null,
      symbol: null,
      x: null,
      y: null
    })

    var Log = Backbone.Model.extend({
      id: null,
      text: null,
      timestamp: null
    })

    var Logs = Backbone.Collection.extend({
      initialize: function(models, options) {
        this.bind('add', options.view.addLog)
        this.bind('remove', options.view.removeLog)

        this.bind('add', function(model) {
          if (this.length > 7) {
            this.remove(this.at(0))
          }
        })
      }
    })

    var Cells = Backbone.Collection.extend({
      initialize: function(models, options) {
        this.bind('reset', options.view.resetCells)
        this.bind('add', options.view.addCell)
      }
    })

    var GameView = Backbone.View.extend({
      el: $('body'),

      initialize: function() {
        this.logs = new Logs(null, { view: this })
        this.cells = new Cells(null, { view: this })
      },

      events: {
      },

      addLog: function(model) {
        $('#log').append($('<li data-id="' + model.get('id') + '">').
            html(Date.create(model.get('ts')).format('{12hr}:{mm}{tt}') + ': ' + model.get('text')))
      },

      removeLog: function(model) {
        $('#log').find('li[data-id="' + model.get('id') + '"]').remove()
      },

      resetCells: function() {
        $('#map').empty()
      },

      addCell: function(model) {
        var $cell = $('<div>', {
          'data-id': model.get('id'),
          'data-x': model.get('x'),
          'data-y': model.get('y'),
          'class': 'cell',
          'style': 'left: ' + parseInt(model.get('x')) * 12 + 'px;' +
                   'top: ' + parseInt(model.get('y')) * 12 + 'px;'
        }).html(model.get('symbol'))

        $('#map').append($cell)
      }
    })

    window.gameView = new GameView

    var socket = io.connect('http://localhost')

    socket.on('view', function(view) {
      window.frame = view

      for (var idx in view.log) {
        var data = view.log[idx]

        var log = new Log(data)

        gameView.logs.add(log)
      }

      gameView.cells.reset()

      for (var y = 0; y < view.height; y++) {
        for (var x = 0; x < view.width; x++) {
          var data = view.cells[y * view.width + x]

          data.x = x
          data.y = y

          var cell = new Cell(data)

          if (typeof data.symbol == 'undefined') {
            data.symbol = '&nbsp;'
          }

          gameView.cells.add(cell)
        }
      }
    })

    jsApp.onload()
  })(jQuery)
